rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    // Match operations: authenticated users can update any user's stats
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Allow cross-user stats updates during matches
      
      // Allow user stats subcollections
      match /stats/{statId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Allow game history subcollections
      match /gameHistory/{gameId} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Achievement Definitions - Read-only for all authenticated users
    match /achievementDefinitions/{achievementId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can write
    }

    // User Achievements - allow cross-user access during match operations
    match /userAchievements/{achievementId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Achievement Progress - users can read/write their own progress
    // Allow cross-user updates during match completion
    match /achievementProgress/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // User Achievement Progress (subcollection)
    match /users/{userId}/achievementProgress/{progressId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Achievement Notifications - allow cross-user access during match operations
    match /achievementNotifications/{notificationId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Global Notifications - users can read their own notifications, system can write
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow write: if request.auth != null;
    }
    
    // User Notifications (subcollection)
    match /users/{userId}/notifications/{notificationId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily/Hourly Metrics for achievement tracking - allow cross-user access
    match /dailyMetrics/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    match /hourlyMetrics/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Daily and hourly metrics with date patterns (userId_date format)
    match /dailyMetrics/{metricId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    match /hourlyMetrics/{metricId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Friend Stats for achievements - allow cross-user access
    match /friendStats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    // User Achievements (legacy path)
    match /users/{userId}/achievements/{achievementId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Friends System - Temporary permissive rules for development
    match /friends/{friendshipId} {
      allow read, write: if request.auth != null; // Simplified for development
    }

    match /friendRequests/{requestId} {
      allow read, write: if request.auth != null; // Simplified for development
    }

    match /gameInvitations/{invitationId} {
      allow read, write: if request.auth != null; // Simplified for development
    }

    // Chat messages - allow authenticated users to read and write
    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Chat System Collections
    // Chat rooms - authenticated users can read all rooms, write to rooms they are participants in
    match /chatRooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.participantIds || 
         request.auth.uid == resource.data.createdBy);
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Chat messages - authenticated users can read messages from rooms they're in
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Chat participants - authenticated users can manage their own participation
    match /chatParticipants/{participantId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // User chat settings - users can only access their own settings
    match /userChatSettings/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // Game system collections
    match /games/{gameId} {
      allow read, write: if request.auth != null;
    }
    
    // Waiting room collection - allow all authenticated users to read/write
    match /waitingroom/{roomId} {
      allow read, write: if request.auth != null;
    }
    
    // Archived matches - allow all authenticated users to read/write
    match /archivedMatches/{matchId} {
      allow read, write: if request.auth != null;
    }
    
    // User connections for presence tracking
    match /userConnections/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Global stats tracking
    match /globalStats/{statId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }

    // Chat System Collections
    // Chat rooms - authenticated users can read all rooms, write to rooms they are participants in
    match /chatRooms/{roomId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid == resource.data.createdBy);
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.createdBy;
    }
    
    // Chat messages - authenticated users can read messages from rooms they're in
    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Chat participants - authenticated users can manage their own participation
    match /chatParticipants/{participantId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // User chat settings - users can only access their own settings
    match /userChatSettings/{userId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }

    // Chat messages - allow authenticated users to read and write
    match /messages/{messageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    match /presence/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Game Modes - Read-only for all authenticated users
    match /gameModes/{modeId} {
      allow read: if request.auth != null;
      allow write: if false; // Only admin can write
    }

    // Games
    match /games/{gameId} {
      allow read, write: if request.auth != null && 
        request.auth.uid in resource.data.players;
      allow create: if request.auth != null && 
        request.auth.uid in request.resource.data.players;
    }
    
    // Users can read and write waiting room documents
    match /waitingroom/{roomId} {
      allow read, write: if request.auth != null;
    }
    
    // Users can read and write matches they are part of
    match /matches/{matchId} {
      allow read, write: if request.auth != null;
    }
    
    // Completed matches - users can read completed matches they were part of
    match /completedmatches/{matchId} {
      allow read, write: if request.auth != null;
    }
    
    // Match archives - for storing historical match data
    match /matchArchives/{matchId} {
      allow read, write: if request.auth != null;
    }
    
    // User game statistics and counters
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User leaderboard statistics
    match /userLeaderboardStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Daily game counters and statistics
    match /dailyStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Hourly game tracking for streaks
    match /hourlyStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // User friends and friend statistics - allow cross-user access during match operations
    match /friendStats/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Users can read and write their own inventory items
    match /inventory/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow reading of public game data (backgrounds, items, etc.)
    match /backgrounds/{backgroundId} {
      allow read: if true;
    }
    
    match /items/{itemId} {
      allow read: if true;
    }
    
    // Users can read and write game sessions they are part of
    match /gameSessions/{sessionId} {
      allow read, write: if request.auth != null;
    }
    
    // Rematch Rooms - allow authenticated users to create, read, and update rematch requests
    match /rematchRooms/{rematchId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        (request.auth.uid == request.resource.data.requesterUserId || 
         request.auth.uid == request.resource.data.opponentUserId);
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.requesterUserId || 
         request.auth.uid == resource.data.opponentUserId);
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.requesterUserId || 
         request.auth.uid == resource.data.opponentUserId);
    }
    
    // Game Invitations - allow authenticated users to send and receive invites
    match /gameInvitations/{invitationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.fromUserId;
      allow update: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
      allow delete: if request.auth != null && 
        (request.auth.uid == resource.data.fromUserId || 
         request.auth.uid == resource.data.toUserId);
    }
    
    // Chat moderation logs - read only for authenticated users
    match /chatModerationLogs/{logId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null; // Allow system to log moderation actions
    }
    
    // Typing indicators for chat - allow read/write for participants
    match /typingIndicators/{roomId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Archived matches - allow authenticated users to read their archived matches
    match /archivedMatches/{matchId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // User connections for presence tracking
    match /userConnections/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Global online count tracking
    match /globalStats/{statId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null;
    }
    
    // Leaderboards - read for all authenticated users, write only by system
    match /leaderboards/{document=**} {
      allow read: if request.auth != null;
      allow write: if false; // Only server-side operations should write leaderboards
    }
    
    // Statistics - read for all authenticated users
    match /statistics/{document=**} {
      allow read: if request.auth != null;
    }
  }
}
